{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * internal utility\n *\n * Why? to read `sx` values and attach component's CSS variables\n *      e.g. <Card sx={{ borderRadius: 0 }} /> should attach\n *          `--Card-radius: 0px` so that developers don't have to remember\n *\n * Why not reuse `styleFunctionSx`?\n *     `styleFunctionSx` is more expensive as it iterates over all the keys\n */ // eslint-disable-next-line import/prefer-default-export\nexport var resolveSxValue = function resolveSxValue(_ref, keys) {\n  var theme = _ref.theme,\n    ownerState = _ref.ownerState;\n  var sxObject = {};\n  function resolveSx(sxProp) {\n    if (typeof sxProp === 'function') {\n      var result = sxProp(theme);\n      resolveSx(result);\n    } else if (Array.isArray(sxProp)) {\n      sxProp.forEach(function (sxItem) {\n        if (typeof sxItem !== 'boolean') {\n          resolveSx(sxItem);\n        }\n      });\n    } else if (typeof sxProp === 'object') {\n      sxObject = _extends({}, sxObject, sxProp);\n    }\n  }\n  if (ownerState.sx) {\n    resolveSx(ownerState.sx);\n    keys.forEach(function (key) {\n      var value = sxObject[key];\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (key === 'borderRadius') {\n          if (typeof value === 'number') {\n            sxObject[key] = \"\".concat(value, \"px\");\n          } else {\n            var _theme$vars;\n            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;\n          }\n        } else if (['p', 'padding', 'm', 'margin'].indexOf(key) !== -1 && typeof value === 'number') {\n          sxObject[key] = theme.spacing(value);\n        } else {\n          sxObject[key] = value;\n        }\n      } else if (typeof value === 'function') {\n        sxObject[key] = value(theme);\n      } else {\n        sxObject[key] = undefined;\n      }\n    });\n  }\n  return sxObject;\n};","map":{"version":3,"names":["_extends","resolveSxValue","_ref","keys","theme","ownerState","sxObject","resolveSx","sxProp","result","Array","isArray","forEach","sxItem","sx","key","value","concat","_theme$vars","vars","radius","indexOf","spacing","undefined"],"sources":["C:/side_project/translator/node_modules/@mui/joy/styles/styleUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * internal utility\n *\n * Why? to read `sx` values and attach component's CSS variables\n *      e.g. <Card sx={{ borderRadius: 0 }} /> should attach\n *          `--Card-radius: 0px` so that developers don't have to remember\n *\n * Why not reuse `styleFunctionSx`?\n *     `styleFunctionSx` is more expensive as it iterates over all the keys\n */ // eslint-disable-next-line import/prefer-default-export\nexport const resolveSxValue = ({\n  theme,\n  ownerState\n}, keys) => {\n  let sxObject = {};\n  function resolveSx(sxProp) {\n    if (typeof sxProp === 'function') {\n      const result = sxProp(theme);\n      resolveSx(result);\n    } else if (Array.isArray(sxProp)) {\n      sxProp.forEach(sxItem => {\n        if (typeof sxItem !== 'boolean') {\n          resolveSx(sxItem);\n        }\n      });\n    } else if (typeof sxProp === 'object') {\n      sxObject = _extends({}, sxObject, sxProp);\n    }\n  }\n  if (ownerState.sx) {\n    resolveSx(ownerState.sx);\n    keys.forEach(key => {\n      const value = sxObject[key];\n      if (typeof value === 'string' || typeof value === 'number') {\n        if (key === 'borderRadius') {\n          if (typeof value === 'number') {\n            sxObject[key] = `${value}px`;\n          } else {\n            var _theme$vars;\n            sxObject[key] = ((_theme$vars = theme.vars) == null ? void 0 : _theme$vars.radius[value]) || value;\n          }\n        } else if (['p', 'padding', 'm', 'margin'].indexOf(key) !== -1 && typeof value === 'number') {\n          sxObject[key] = theme.spacing(value);\n        } else {\n          sxObject[key] = value;\n        }\n      } else if (typeof value === 'function') {\n        sxObject[key] = value(theme);\n      } else {\n        sxObject[key] = undefined;\n      }\n    });\n  }\n  return sxObject;\n};"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GATA,CASI;AACJ,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAcA,CAAAC,IAAA,EAGxBC,IAAI,EAAK;EAAA,IAFVC,KAAK,GAAAF,IAAA,CAALE,KAAK;IACLC,UAAU,GAAAH,IAAA,CAAVG,UAAU;EAEV,IAAIC,QAAQ,GAAG,CAAC,CAAC;EACjB,SAASC,SAASA,CAACC,MAAM,EAAE;IACzB,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;MAChC,IAAMC,MAAM,GAAGD,MAAM,CAACJ,KAAK,CAAC;MAC5BG,SAAS,CAACE,MAAM,CAAC;IACnB,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,EAAE;MAChCA,MAAM,CAACI,OAAO,CAAC,UAAAC,MAAM,EAAI;QACvB,IAAI,OAAOA,MAAM,KAAK,SAAS,EAAE;UAC/BN,SAAS,CAACM,MAAM,CAAC;QACnB;MACF,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,OAAOL,MAAM,KAAK,QAAQ,EAAE;MACrCF,QAAQ,GAAGN,QAAQ,CAAC,CAAC,CAAC,EAAEM,QAAQ,EAAEE,MAAM,CAAC;IAC3C;EACF;EACA,IAAIH,UAAU,CAACS,EAAE,EAAE;IACjBP,SAAS,CAACF,UAAU,CAACS,EAAE,CAAC;IACxBX,IAAI,CAACS,OAAO,CAAC,UAAAG,GAAG,EAAI;MAClB,IAAMC,KAAK,GAAGV,QAAQ,CAACS,GAAG,CAAC;MAC3B,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC1D,IAAID,GAAG,KAAK,cAAc,EAAE;UAC1B,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;YAC7BV,QAAQ,CAACS,GAAG,CAAC,MAAAE,MAAA,CAAMD,KAAK,OAAI;UAC9B,CAAC,MAAM;YACL,IAAIE,WAAW;YACfZ,QAAQ,CAACS,GAAG,CAAC,GAAG,CAAC,CAACG,WAAW,GAAGd,KAAK,CAACe,IAAI,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,WAAW,CAACE,MAAM,CAACJ,KAAK,CAAC,KAAKA,KAAK;UACpG;QACF,CAAC,MAAM,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,CAAC,CAACK,OAAO,CAACN,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,OAAOC,KAAK,KAAK,QAAQ,EAAE;UAC3FV,QAAQ,CAACS,GAAG,CAAC,GAAGX,KAAK,CAACkB,OAAO,CAACN,KAAK,CAAC;QACtC,CAAC,MAAM;UACLV,QAAQ,CAACS,GAAG,CAAC,GAAGC,KAAK;QACvB;MACF,CAAC,MAAM,IAAI,OAAOA,KAAK,KAAK,UAAU,EAAE;QACtCV,QAAQ,CAACS,GAAG,CAAC,GAAGC,KAAK,CAACZ,KAAK,CAAC;MAC9B,CAAC,MAAM;QACLE,QAAQ,CAACS,GAAG,CAAC,GAAGQ,SAAS;MAC3B;IACF,CAAC,CAAC;EACJ;EACA,OAAOjB,QAAQ;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}