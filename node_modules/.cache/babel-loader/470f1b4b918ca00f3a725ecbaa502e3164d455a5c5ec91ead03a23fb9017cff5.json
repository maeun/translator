{"ast":null,"code":"var _jsxFileName = \"C:\\\\side_project\\\\translator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { OpenAI } from \"openai\";\nimport { Input, Button, Typography } from \"@mui/joy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  organization: \"org-FtF6gV7TTvDQGBIAMsnGmKVY\",\n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true // 브라우저 환경에서 실행 허용\n});\n\nfunction TranslationApp() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const [translatedText, setTranslatedText] = useState(\"\"); // 번역 결과 상태 추가\n\n  const handleInputChange = event => {\n    setInputText(event.target.value);\n  };\n  const handleButtonClick = async () => {\n    try {\n      const completion = await openai.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: \"You are a helpful translator. Please translate it in Korean.\"\n        }, {\n          role: \"user\",\n          content: inputText\n        } // 입력된 텍스트를 추가\n        ],\n\n        model: \"gpt-3.5-turbo\"\n      });\n      const translatedResult = completion.choices[0].message.content; // 번역 결과 추출\n      setTranslatedText(translatedResult); // 번역 결과 상태 업데이트\n    } catch (error) {\n      console.error(\"Error fetching chat completion:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        color: \"danger\",\n        variant: \"soft\",\n        placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\\u2026\",\n        value: inputText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"soft\",\n        color: \"primary\",\n        onClick: handleButtonClick,\n        children: \"\\uBC88\\uC5ED \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), translatedText && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"\\uBC88\\uC5ED \\uACB0\\uACFC:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: translatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslationApp, \"4+LesIWMfEiPKtp4AMHqn4kTLnU=\");\n_c = TranslationApp;\nexport default TranslationApp;\nvar _c;\n$RefreshReg$(_c, \"TranslationApp\");","map":{"version":3,"names":["React","useState","OpenAI","Input","Button","Typography","jsxDEV","_jsxDEV","openai","organization","apiKey","dangerouslyAllowBrowser","TranslationApp","_s","inputText","setInputText","translatedText","setTranslatedText","handleInputChange","event","target","value","handleButtonClick","completion","chat","completions","create","messages","role","content","model","translatedResult","choices","message","error","console","className","children","color","variant","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/side_project/translator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { OpenAI } from \"openai\";\nimport {\n  Input,\n  Button,\n  Typography\n} from \"@mui/joy\";\n\nconst openai = new OpenAI({\n  organization: \"org-FtF6gV7TTvDQGBIAMsnGmKVY\",\n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true, // 브라우저 환경에서 실행 허용\n});\n\n\nfunction TranslationApp() {\n  const [inputText, setInputText] = useState(\"\");\n  const [translatedText, setTranslatedText] = useState(\"\"); // 번역 결과 상태 추가\n\n  const handleInputChange = (event) => {\n    setInputText(event.target.value);\n  };\n\n  const handleButtonClick = async () => {\n    try{\n    const completion = await openai.chat.completions.create({\n      messages: [\n      { role: \"system\", content: \"You are a helpful translator. Please translate it in Korean.\" },\n      { role: \"user\", content: inputText }, // 입력된 텍스트를 추가\n    ],\n      \n      model: \"gpt-3.5-turbo\",\n    });\n    const translatedResult = completion.choices[0].message.content; // 번역 결과 추출\n      setTranslatedText(translatedResult); // 번역 결과 상태 업데이트\n    } catch (error) {\n      console.error(\"Error fetching chat completion:\", error);\n    }\n  };\n\n  return (\n    <div className=\"Main\">\n      <div className=\"InputWrapper\">\n        <Input\n          color=\"danger\"\n          variant=\"soft\"\n          placeholder=\"여기에 입력하세요…\"\n          value={inputText}\n          onChange={handleInputChange}\n        />\n\n<Button variant=\"soft\" color=\"primary\" onClick={handleButtonClick}>\n          번역 시작\n        </Button>\n      </div>\n\n      {translatedText && (\n        <div>\n          <Typography variant=\"h6\">번역 결과:</Typography>\n          <Typography variant=\"body1\">{translatedText}</Typography>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default TranslationApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}