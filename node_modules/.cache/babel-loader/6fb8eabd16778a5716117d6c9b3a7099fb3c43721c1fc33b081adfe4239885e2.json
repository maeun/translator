{"ast":null,"code":"var _jsxFileName = \"C:\\\\side_project\\\\translator\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Configuration, OpenAIApi } from \"openai\";\nimport { Input, Button, Modal, ModalClose, ModalDialog, Typography } from \"@mui/joy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst configuration = new Configuration({\n  organization: \"org-FtF6gV7TTvDQGBIAMsnGmKVY\",\n  apiKey: \"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\"\n});\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listEngines();\nconsole.log(response);\nfunction TranslationApp() {\n  _s();\n  const [inputText, setInputText] = useState(\"\");\n  const handleInputChange = event => {\n    setInputText(event.target.value);\n  };\n  const handleButtonClick = async () => {\n    try {\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [{\n          role: \"system\",\n          content: \"You are a helpful translator. Please translate it in Korean.\"\n        }, {\n          role: \"user\",\n          content: inputText\n        }],\n        max_tokens: 200\n      });\n      const response = completion.data.choices[0].message.content;\n\n      // API 응답을 처리하거나 다른 작업 수행\n      console.log(\"Chatbot Response:\", response);\n    } catch (error) {\n      console.error(\"Error fetching chat completion:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        color: \"danger\",\n        variant: \"soft\",\n        placeholder: \"\\uC5EC\\uAE30\\uC5D0 \\uC785\\uB825\\uD558\\uC138\\uC694\\u2026\",\n        value: inputText,\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"soft\",\n        color: \"primary\",\n        onClick: handleButtonClick,\n        children: \"Open modal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslationApp, \"FupQuLxG7pBPrulNgTXkcZMsQO8=\");\n_c = TranslationApp;\nexport default TranslationApp;\nvar _c;\n$RefreshReg$(_c, \"TranslationApp\");","map":{"version":3,"names":["React","useState","Configuration","OpenAIApi","Input","Button","Modal","ModalClose","ModalDialog","Typography","jsxDEV","_jsxDEV","configuration","organization","apiKey","openai","response","listEngines","console","log","TranslationApp","_s","inputText","setInputText","handleInputChange","event","target","value","handleButtonClick","completion","chat","completions","create","model","messages","role","content","max_tokens","data","choices","message","error","className","children","color","variant","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/side_project/translator/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Configuration, OpenAIApi } from \"openai\";\nimport {\n  Input,\n  Button,\n  Modal,\n  ModalClose,\n  ModalDialog,\n  Typography,\n} from \"@mui/joy\";\n\nconst configuration = new Configuration({\n  organization: \"org-FtF6gV7TTvDQGBIAMsnGmKVY\",\n  apiKey: \"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\",\n});\n\nconst openai = new OpenAIApi(configuration);\nconst response = await openai.listEngines();\nconsole.log(response)\n\nfunction TranslationApp() {\n  const [inputText, setInputText] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    setInputText(event.target.value);\n  };\n\n  const handleButtonClick = async () => {\n    try {\n      const completion = await openai.chat.completions.create({\n        model: \"gpt-3.5-turbo\",\n        messages: [\n          { role: \"system\", content: \"You are a helpful translator. Please translate it in Korean.\" },\n          { role: \"user\", content: inputText },\n        ],\n        max_tokens: 200,\n      });\n      const response = completion.data.choices[0].message.content;\n\n      // API 응답을 처리하거나 다른 작업 수행\n      console.log(\"Chatbot Response:\", response);\n    } catch (error) {\n      console.error(\"Error fetching chat completion:\", error);\n    }\n  };\n\n  return (\n    <div className=\"Main\">\n      <div className=\"InputWrapper\">\n        <Input\n          color=\"danger\"\n          variant=\"soft\"\n          placeholder=\"여기에 입력하세요…\"\n          value={inputText}\n          onChange={handleInputChange}\n        />\n\n        <Button variant=\"soft\" color=\"primary\" onClick={handleButtonClick}>\n          Open modal\n        </Button>\n      </div>     \n    </div>\n  );\n}\n\nexport default TranslationApp;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,EAAEC,SAAS,QAAQ,QAAQ;AACjD,SACEC,KAAK,EACLC,MAAM,EACNC,KAAK,EACLC,UAAU,EACVC,WAAW,EACXC,UAAU,QACL,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElB,MAAMC,aAAa,GAAG,IAAIV,aAAa,CAAC;EACtCW,YAAY,EAAE,8BAA8B;EAC5CC,MAAM,EAAE;AACV,CAAC,CAAC;AAEF,MAAMC,MAAM,GAAG,IAAIZ,SAAS,CAACS,aAAa,CAAC;AAC3C,MAAMI,QAAQ,GAAG,MAAMD,MAAM,CAACE,WAAW,CAAC,CAAC;AAC3CC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;AAErB,SAASI,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMuB,iBAAiB,GAAIC,KAAK,IAAK;IACnCF,YAAY,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAClC,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,UAAU,GAAG,MAAMd,MAAM,CAACe,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;QACtDC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CACR;UAAEC,IAAI,EAAE,QAAQ;UAAEC,OAAO,EAAE;QAA+D,CAAC,EAC3F;UAAED,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAEd;QAAU,CAAC,CACrC;QACDe,UAAU,EAAE;MACd,CAAC,CAAC;MACF,MAAMrB,QAAQ,GAAGa,UAAU,CAACS,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACJ,OAAO;;MAE3D;MACAlB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEH,QAAQ,CAAC;IAC5C,CAAC,CAAC,OAAOyB,KAAK,EAAE;MACdvB,OAAO,CAACuB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACzD;EACF,CAAC;EAED,oBACE9B,OAAA;IAAK+B,SAAS,EAAC,MAAM;IAAAC,QAAA,eACnBhC,OAAA;MAAK+B,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BhC,OAAA,CAACP,KAAK;QACJwC,KAAK,EAAC,QAAQ;QACdC,OAAO,EAAC,MAAM;QACdC,WAAW,EAAC,yDAAY;QACxBnB,KAAK,EAAEL,SAAU;QACjByB,QAAQ,EAAEvB;MAAkB;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B,CAAC,eAEFxC,OAAA,CAACN,MAAM;QAACwC,OAAO,EAAC,MAAM;QAACD,KAAK,EAAC,SAAS;QAACQ,OAAO,EAAExB,iBAAkB;QAAAe,QAAA,EAAC;MAEnE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9B,EAAA,CA3CQD,cAAc;AAAAiC,EAAA,GAAdjC,cAAc;AA6CvB,eAAeA,cAAc;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}