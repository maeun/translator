{"ast":null,"code":"import _slicedToArray from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar VariantColorContext = /*#__PURE__*/React.createContext(undefined);\n\n/**\n * @internal For internal usage only.\n *\n * Use this function in a slot to get the matched default variant and color when the parent's variant and/or color changes.\n */\nexport function getChildVariantAndColor(parentVariant, parentColor) {\n  var childColor = parentColor;\n  var childVariant = parentVariant;\n  if (parentVariant === 'outlined') {\n    childColor = 'neutral';\n    childVariant = 'plain';\n  }\n  if (parentVariant === 'plain') {\n    childColor = 'neutral';\n  }\n  return {\n    variant: childVariant,\n    color: childColor\n  };\n}\n\n/**\n * @internal For internal usage only.\n *\n * This hook should be used in a children that are connected with its parent\n * to get the matched default variant and color when the parent's variant and/or color changes.\n *\n * For example, the `Option` component in `Select` component is using this function.\n */\nexport function useVariantColor(instanceVariant, instanceColor) {\n  var alwaysInheritColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var value = React.useContext(VariantColorContext);\n  var _ref = typeof value === 'string' ? value.split(':') : [],\n    _ref2 = _slicedToArray(_ref, 2),\n    variant = _ref2[0],\n    color = _ref2[1];\n  var result = getChildVariantAndColor(variant || undefined, color || undefined);\n  result.variant = instanceVariant || result.variant;\n  result.color = instanceColor || (alwaysInheritColor ? color : result.color);\n  return result;\n}\n\n/**\n * @internal For internal usage only.\n */\nexport function VariantColorProvider(_ref3) {\n  var children = _ref3.children,\n    color = _ref3.color,\n    variant = _ref3.variant;\n  return /*#__PURE__*/_jsx(VariantColorContext.Provider, {\n    value: \"\".concat(variant || '', \":\").concat(color || ''),\n    children: children\n  });\n}","map":{"version":3,"names":["React","jsx","_jsx","VariantColorContext","createContext","undefined","getChildVariantAndColor","parentVariant","parentColor","childColor","childVariant","variant","color","useVariantColor","instanceVariant","instanceColor","alwaysInheritColor","arguments","length","value","useContext","_ref","split","_ref2","_slicedToArray","result","VariantColorProvider","_ref3","children","Provider","concat"],"sources":["C:/side_project/translator/node_modules/@mui/joy/styles/variantColorInheritance.js"],"sourcesContent":["import * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantColorContext = /*#__PURE__*/React.createContext(undefined);\n\n/**\n * @internal For internal usage only.\n *\n * Use this function in a slot to get the matched default variant and color when the parent's variant and/or color changes.\n */\nexport function getChildVariantAndColor(parentVariant, parentColor) {\n  let childColor = parentColor;\n  let childVariant = parentVariant;\n  if (parentVariant === 'outlined') {\n    childColor = 'neutral';\n    childVariant = 'plain';\n  }\n  if (parentVariant === 'plain') {\n    childColor = 'neutral';\n  }\n  return {\n    variant: childVariant,\n    color: childColor\n  };\n}\n\n/**\n * @internal For internal usage only.\n *\n * This hook should be used in a children that are connected with its parent\n * to get the matched default variant and color when the parent's variant and/or color changes.\n *\n * For example, the `Option` component in `Select` component is using this function.\n */\nexport function useVariantColor(instanceVariant, instanceColor, alwaysInheritColor = false) {\n  const value = React.useContext(VariantColorContext);\n  const [variant, color] = typeof value === 'string' ? value.split(':') : [];\n  const result = getChildVariantAndColor(variant || undefined, color || undefined);\n  result.variant = instanceVariant || result.variant;\n  result.color = instanceColor || (alwaysInheritColor ? color : result.color);\n  return result;\n}\n\n/**\n * @internal For internal usage only.\n */\nexport function VariantColorProvider({\n  children,\n  color,\n  variant\n}) {\n  return /*#__PURE__*/_jsx(VariantColorContext.Provider, {\n    value: `${variant || ''}:${color || ''}`,\n    children: children\n  });\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,IAAMC,mBAAmB,GAAG,aAAaH,KAAK,CAACI,aAAa,CAACC,SAAS,CAAC;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,aAAa,EAAEC,WAAW,EAAE;EAClE,IAAIC,UAAU,GAAGD,WAAW;EAC5B,IAAIE,YAAY,GAAGH,aAAa;EAChC,IAAIA,aAAa,KAAK,UAAU,EAAE;IAChCE,UAAU,GAAG,SAAS;IACtBC,YAAY,GAAG,OAAO;EACxB;EACA,IAAIH,aAAa,KAAK,OAAO,EAAE;IAC7BE,UAAU,GAAG,SAAS;EACxB;EACA,OAAO;IACLE,OAAO,EAAED,YAAY;IACrBE,KAAK,EAAEH;EACT,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAeA,CAACC,eAAe,EAAEC,aAAa,EAA8B;EAAA,IAA5BC,kBAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAZ,SAAA,GAAAY,SAAA,MAAG,KAAK;EACxF,IAAME,KAAK,GAAGnB,KAAK,CAACoB,UAAU,CAACjB,mBAAmB,CAAC;EACnD,IAAAkB,IAAA,GAAyB,OAAOF,KAAK,KAAK,QAAQ,GAAGA,KAAK,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;IAAAC,KAAA,GAAAC,cAAA,CAAAH,IAAA;IAAnEV,OAAO,GAAAY,KAAA;IAAEX,KAAK,GAAAW,KAAA;EACrB,IAAME,MAAM,GAAGnB,uBAAuB,CAACK,OAAO,IAAIN,SAAS,EAAEO,KAAK,IAAIP,SAAS,CAAC;EAChFoB,MAAM,CAACd,OAAO,GAAGG,eAAe,IAAIW,MAAM,CAACd,OAAO;EAClDc,MAAM,CAACb,KAAK,GAAGG,aAAa,KAAKC,kBAAkB,GAAGJ,KAAK,GAAGa,MAAM,CAACb,KAAK,CAAC;EAC3E,OAAOa,MAAM;AACf;;AAEA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA,CAAAC,KAAA,EAIjC;EAAA,IAHDC,QAAQ,GAAAD,KAAA,CAARC,QAAQ;IACRhB,KAAK,GAAAe,KAAA,CAALf,KAAK;IACLD,OAAO,GAAAgB,KAAA,CAAPhB,OAAO;EAEP,OAAO,aAAaT,IAAI,CAACC,mBAAmB,CAAC0B,QAAQ,EAAE;IACrDV,KAAK,KAAAW,MAAA,CAAKnB,OAAO,IAAI,EAAE,OAAAmB,MAAA,CAAIlB,KAAK,IAAI,EAAE,CAAE;IACxCgB,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}