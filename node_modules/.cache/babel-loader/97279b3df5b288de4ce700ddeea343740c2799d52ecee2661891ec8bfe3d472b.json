{"ast":null,"code":"import _objectSpread from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/side_project/translator/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n// File generated from our OpenAPI spec by Stainless.\nimport { APIResource } from 'openai/resource';\nexport var Moderations = /*#__PURE__*/function (_APIResource) {\n  _inherits(Moderations, _APIResource);\n  var _super = _createSuper(Moderations);\n  function Moderations() {\n    _classCallCheck(this, Moderations);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Moderations, [{\n    key: \"create\",\n    value:\n    /**\n     * Classifies if text violates OpenAI's Content Policy\n     */\n    function create(body, options) {\n      return this.post('/moderations', _objectSpread({\n        body: body\n      }, options));\n    }\n  }]);\n  return Moderations;\n}(APIResource);\n(function (Moderations) {})(Moderations || (Moderations = {}));","map":{"version":3,"names":["APIResource","Moderations","_APIResource","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","body","options","post","_objectSpread"],"sources":["C:\\side_project\\translator\\node_modules\\openai\\src\\resources\\moderations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless.\n\nimport * as Core from '../core';\nimport { APIResource } from '../resource';\nimport * as API from './index';\n\nexport class Moderations extends APIResource {\n  /**\n   * Classifies if text violates OpenAI's Content Policy\n   */\n  create(\n    body: ModerationCreateParams,\n    options?: Core.RequestOptions,\n  ): Core.APIPromise<ModerationCreateResponse> {\n    return this.post('/moderations', { body, ...options });\n  }\n}\n\nexport interface Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  categories: Moderation.Categories;\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  category_scores: Moderation.CategoryScores;\n\n  /**\n   * Whether the content violates\n   * [OpenAI's usage policies](/policies/usage-policies).\n   */\n  flagged: boolean;\n}\n\nexport namespace Moderation {\n  /**\n   * A list of the categories, and whether they are flagged or not.\n   */\n  export interface Categories {\n    /**\n     * Whether the content was flagged as 'hate'.\n     */\n    hate: boolean;\n\n    /**\n     * Whether the content was flagged as 'hate/threatening'.\n     */\n    'hate/threatening': boolean;\n\n    /**\n     * Whether the content was flagged as 'self-harm'.\n     */\n    'self-harm': boolean;\n\n    /**\n     * Whether the content was flagged as 'sexual'.\n     */\n    sexual: boolean;\n\n    /**\n     * Whether the content was flagged as 'sexual/minors'.\n     */\n    'sexual/minors': boolean;\n\n    /**\n     * Whether the content was flagged as 'violence'.\n     */\n    violence: boolean;\n\n    /**\n     * Whether the content was flagged as 'violence/graphic'.\n     */\n    'violence/graphic': boolean;\n  }\n\n  /**\n   * A list of the categories along with their scores as predicted by model.\n   */\n  export interface CategoryScores {\n    /**\n     * The score for the category 'hate'.\n     */\n    hate: number;\n\n    /**\n     * The score for the category 'hate/threatening'.\n     */\n    'hate/threatening': number;\n\n    /**\n     * The score for the category 'self-harm'.\n     */\n    'self-harm': number;\n\n    /**\n     * The score for the category 'sexual'.\n     */\n    sexual: number;\n\n    /**\n     * The score for the category 'sexual/minors'.\n     */\n    'sexual/minors': number;\n\n    /**\n     * The score for the category 'violence'.\n     */\n    violence: number;\n\n    /**\n     * The score for the category 'violence/graphic'.\n     */\n    'violence/graphic': number;\n  }\n}\n\n/**\n * Represents policy compliance report by OpenAI's content moderation model against\n * a given input.\n */\nexport interface ModerationCreateResponse {\n  /**\n   * The unique identifier for the moderation request.\n   */\n  id: string;\n\n  /**\n   * The model used to generate the moderation results.\n   */\n  model: string;\n\n  /**\n   * A list of moderation objects.\n   */\n  results: Array<Moderation>;\n}\n\nexport interface ModerationCreateParams {\n  /**\n   * The input text to classify\n   */\n  input: string | Array<string>;\n\n  /**\n   * Two content moderations models are available: `text-moderation-stable` and\n   * `text-moderation-latest`.\n   *\n   * The default is `text-moderation-latest` which will be automatically upgraded\n   * over time. This ensures you are always using our most accurate model. If you use\n   * `text-moderation-stable`, we will provide advanced notice before updating the\n   * model. Accuracy of `text-moderation-stable` may be slightly lower than for\n   * `text-moderation-latest`.\n   */\n  model?: (string & {}) | 'text-moderation-latest' | 'text-moderation-stable';\n}\n\nexport namespace Moderations {\n  export import Moderation = API.Moderation;\n  export import ModerationCreateResponse = API.ModerationCreateResponse;\n  export import ModerationCreateParams = API.ModerationCreateParams;\n}\n"],"mappings":";;;;;AAAA;SAGSA,WAAW,QAAQ,iBAAiB;AAG7C,WAAaC,WAAY,0BAAAC,YAAA;EAAAC,SAAA,CAAAF,WAAA,EAAAC,YAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,WAAA;EAAA,SAAAA,YAAA;IAAAK,eAAA,OAAAL,WAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,WAAA;IAAAS,GAAA;IAAAC,KAAA;;;;oBAIvBC,IACE,EAA4BC,OAC5B,EAA6B;aAE7B,IAAO,CAAAC,IAAK,eAAK,EAAAC,aAAA;QAAcH,IAAI,EAAJA;MAAI,GAAIC,OAAK;;;;EARfb,WAAW;AAwJ5C,WAAiBC,WAAW,MAAAA,WAAA,KAAAA,WAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}